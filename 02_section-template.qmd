```{r}
# If the report fails to render at the `create-measurement-group-sections` chunk
# in `01_producer-report.qmd`, run all chunks above to load the data in your
# environment. Then uncomment this group assignment and run each code chunk in
# this file interactively to troubleshoot.

#group <- "macro"
```

```{r}
# Get measurement group label for section header
header <- dictionary |>
  dplyr::filter(measurement_group == group) |> #want to leave section headers at measurement group label
  pull_unique(measurement_group)

# Get path of measurement group image
image_path <- glue::glue("images/{group}.png")

# Insert image into header if image exists for that measurement group
image <- ifelse(
  fs::file_exists(image_path),
  glue::glue("![]({image_path}){{height='50px'}}"),
  ""
)
```

### `r glue::glue("{header} {image}")`

```{r}
# Include texture triangle for physical group
tt_path <- "figure-output/texture-triangle.png"
if (group == "physical" & fs::file_exists(tt_path)) {
  texture_triangle <- glue::glue("![]({tt_path}){{width='6in'}}")
}
```

```{r}
#| output: asis
# Include page break after texture triangle
if (group == "physical" & fs::file_exists(tt_path)) { #WHERE IS GROUP STORED
  cat(texture_triangle)
  cat("\n")
  cat("{{< pagebreak >}}")
}
```

```{r}
# Print the table
table_list |>
  purrr::pluck(group)
```

\newline

::: {.content-visible when-format="html"}
```{r}
#If HTML, convert the strip plot to interactive ggiraph
plot_list |>
 purrr::pluck(group) |> # group is defined by measurement group but plot list names are group*depth, changed to group_data 10/4/24
  soils::convert_ggiraph(
    plot, #ggplot object to print. Argument code will be ignored if this argument is supplied.
    plot_name = group,
    body_font = body_font
  )



#convert_ggiraph
```
:::

::: {.content-visible unless-format="html"}
```{r}
# If not HTML, just print the plot

 plot_list |>
 purrr::pluck(group) #changed from group to group_data 10/4/24

```
:::

{{< pagebreak >}}
